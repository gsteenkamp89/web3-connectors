{"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport invariant from 'tiny-invariant';\r\nexport class RequestError extends Error {\r\n    constructor(message, code, data) {\r\n        super();\r\n        this.code = code;\r\n        this.data = data;\r\n        this.name = this.constructor.name;\r\n        this.message = message;\r\n    }\r\n}\r\nclass MiniRpcProvider {\r\n    constructor(chainId, url) {\r\n        this.isMetaMask = false;\r\n        this.sendAsync = (request, callback) => {\r\n            console.log('sendAsync', request.method, request.params);\r\n            this.request(request.method, request.params)\r\n                .then(result => callback(null, { jsonrpc: '2.0', id: request.id, result }))\r\n                .catch(error => callback(error, null));\r\n        };\r\n        this.request = async (method, params) => {\r\n            if (typeof method !== 'string') {\r\n                params = method.params;\r\n                method = method.method;\r\n            }\r\n            const response = await fetch(this.url, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    jsonrpc: '2.0',\r\n                    id: 1,\r\n                    method,\r\n                    params\r\n                })\r\n            });\r\n            if (!response.ok)\r\n                throw new RequestError(`${response.status}: ${response.statusText}`, -32000);\r\n            const body = await response.json();\r\n            if ('error' in body) {\r\n                throw new RequestError(body?.error?.message, body?.error?.code, body?.error?.data);\r\n            }\r\n            else if ('result' in body) {\r\n                return body.result;\r\n            }\r\n            else {\r\n                throw new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, body);\r\n            }\r\n        };\r\n        this.chainId = chainId;\r\n        this.url = url;\r\n        const parsed = new URL(url);\r\n        this.host = parsed.host;\r\n        this.path = parsed.pathname;\r\n    }\r\n}\r\nexport class NetworkConnector extends AbstractConnector {\r\n    constructor({ urls, defaultChainId }) {\r\n        invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url');\r\n        super({ supportedChainIds: Object.keys(urls).map((k) => Number(k)) });\r\n        this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\r\n        this.providers = Object.keys(urls).reduce((accumulator, chainId) => {\r\n            accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\r\n            return accumulator;\r\n        }, {});\r\n    }\r\n    async activate() {\r\n        return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null };\r\n    }\r\n    async getProvider() {\r\n        return this.providers[this.currentChainId];\r\n    }\r\n    async getChainId() {\r\n        return this.currentChainId;\r\n    }\r\n    async getAccount() {\r\n        return null;\r\n    }\r\n    deactivate() {\r\n        return;\r\n    }\r\n    changeChainId(chainId) {\r\n        invariant(Object.keys(this.providers).includes(chainId.toString()), `No url found for chainId ${chainId}`);\r\n        this.currentChainId = chainId;\r\n        this.emitUpdate({ provider: this.providers[this.currentChainId], chainId });\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":[],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/gerhardsteenkamp/Desktop/linumlabs/web3-react/packages/network-connector/src/index.d.ts","writeByteOrderMark":false,"text":"import { ConnectorUpdate } from '@web3-react/types';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\ndeclare type AsyncSendable = {\r\n    isMetaMask?: boolean;\r\n    host?: string;\r\n    path?: string;\r\n    sendAsync?: (request: any, callback: (error: any, response: any) => void) => void;\r\n    send?: (request: any, callback: (error: any, response: any) => void) => void;\r\n};\r\nexport declare class RequestError extends Error {\r\n    code: number;\r\n    data?: unknown;\r\n    constructor(message: string, code: number, data?: unknown);\r\n}\r\ndeclare class MiniRpcProvider implements AsyncSendable {\r\n    readonly isMetaMask: false;\r\n    readonly chainId: number;\r\n    readonly url: string;\r\n    readonly host: string;\r\n    readonly path: string;\r\n    constructor(chainId: number, url: string);\r\n    readonly sendAsync: (request: {\r\n        jsonrpc: '2.0';\r\n        id: number | string | null;\r\n        method: string;\r\n        params?: unknown[] | object;\r\n    }, callback: (error: any, response: any) => void) => void;\r\n    readonly request: (method: string | {\r\n        method: string;\r\n        params?: object | unknown[] | undefined;\r\n    }, params?: object | unknown[] | undefined) => Promise<unknown>;\r\n}\r\ninterface NetworkConnectorArguments {\r\n    urls: {\r\n        [chainId: number]: string;\r\n    };\r\n    defaultChainId?: number;\r\n}\r\nexport declare class NetworkConnector extends AbstractConnector {\r\n    private readonly providers;\r\n    private currentChainId;\r\n    constructor({ urls, defaultChainId }: NetworkConnectorArguments);\r\n    activate(): Promise<ConnectorUpdate>;\r\n    getProvider(): Promise<MiniRpcProvider>;\r\n    getChainId(): Promise<number>;\r\n    getAccount(): Promise<null>;\r\n    deactivate(): void;\r\n    changeChainId(chainId: number): void;\r\n}\r\nexport {};\r\n"}}
