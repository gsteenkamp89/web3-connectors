{"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport Web3ProviderEngine from 'web3-provider-engine';\r\nimport { LatticeSubprovider } from '@0x/subproviders/lib/src/subproviders/lattice';\r\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\r\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider'; // https://github.com/0xProject/0x-monorepo/issues/1400\r\nexport class LatticeConnector extends AbstractConnector {\r\n    constructor({ chainId, url, pollingInterval, requestTimeoutMs, appName }) {\r\n        super({ supportedChainIds: [chainId] });\r\n        this.chainId = chainId;\r\n        this.url = url;\r\n        this.pollingInterval = pollingInterval;\r\n        this.requestTimeoutMs = requestTimeoutMs;\r\n        this.appName = appName;\r\n    }\r\n    async activate() {\r\n        if (!this.provider) {\r\n            const LatticeKeyring = await import('eth-lattice-keyring').then(m => m?.default ?? m);\r\n            const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval });\r\n            const opts = {\r\n                appName: this.appName,\r\n                latticeConnectClient: LatticeKeyring,\r\n                networkId: this.chainId\r\n            };\r\n            engine.addProvider(new LatticeSubprovider(opts));\r\n            engine.addProvider(new CacheSubprovider());\r\n            engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs));\r\n            this.provider = engine;\r\n        }\r\n        this.provider.start();\r\n        return { provider: this.provider, chainId: this.chainId };\r\n    }\r\n    async getProvider() {\r\n        return this.provider;\r\n    }\r\n    async getChainId() {\r\n        return this.chainId;\r\n    }\r\n    async getAccount() {\r\n        return this.provider._providers[0].getAccountsAsync(1).then((accounts) => accounts[0]);\r\n    }\r\n    deactivate() {\r\n        this.provider.stop();\r\n    }\r\n    async close() {\r\n        this.emitDeactivate();\r\n        // Due to limitations in the LatticeSubprovider API, we use this code with `getAccounts`\r\n        // as a hack to allow us to close out the connection and forget data.\r\n        // It will get handled in `eth-lattice-keyring`, which will forget the device and return\r\n        // an empty array (whose first element will be null/undefined)\r\n        const CLOSE_CODE = -1000;\r\n        return this.provider._providers[0].getAccountsAsync(CLOSE_CODE).then((accounts) => accounts[0]);\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":[],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAA;AAClE,OAAO,kBAAkB,MAAM,sBAAsB,CAAA;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,+CAA+C,CAAA;AAClF,OAAO,gBAAgB,MAAM,4CAA4C,CAAA;AACzE,OAAO,EAAE,cAAc,EAAE,MAAM,uDAAuD,CAAA,CAAC,uDAAuD;AAU9I,MAAM,OAAO,gBAAiB,SAAQ,iBAAiB;IAQrD,YAAY,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,EAAE,gBAAgB,EAAE,OAAO,EAA6B;QACjG,KAAK,CAAC,EAAE,iBAAiB,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QAEvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,eAAe,GAAG,eAAe,CAAA;QACtC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;QACxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC,CAAA;YACrF,MAAM,MAAM,GAAG,IAAI,kBAAkB,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAA;YAChF,MAAM,IAAI,GAAG;gBACX,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,oBAAoB,EAAE,cAAc;gBACpC,SAAS,EAAE,IAAI,CAAC,OAAO;aACxB,CAAA;YACD,MAAM,CAAC,WAAW,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAA;YAChD,MAAM,CAAC,WAAW,CAAC,IAAI,gBAAgB,EAAE,CAAC,CAAA;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAA;YACvE,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAA;SACvB;QAED,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;QAErB,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAA;IAC3D,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAA;IACtB,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1G,CAAC;IAEM,UAAU;QACf,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;IACtB,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,IAAI,CAAC,cAAc,EAAE,CAAA;QACrB,wFAAwF;QACxF,qEAAqE;QACrE,wFAAwF;QACxF,8DAA8D;QAC9D,MAAM,UAAU,GAAG,CAAC,IAAI,CAAA;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IACnH,CAAC;CACF\"}","dts":{"name":"/Users/gerhardsteenkamp/Desktop/linumlabs/web3-react/packages/lattice-connector/src/index.d.ts","writeByteOrderMark":false,"text":"import { ConnectorUpdate } from '@web3-react/types';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport Web3ProviderEngine from 'web3-provider-engine';\r\ninterface LatticeConnectorArguments {\r\n    chainId: number;\r\n    url: string;\r\n    pollingInterval?: number;\r\n    requestTimeoutMs?: number;\r\n    appName: string;\r\n}\r\nexport declare class LatticeConnector extends AbstractConnector {\r\n    private readonly chainId;\r\n    private readonly url;\r\n    private readonly pollingInterval?;\r\n    private readonly requestTimeoutMs?;\r\n    private readonly appName;\r\n    private provider;\r\n    constructor({ chainId, url, pollingInterval, requestTimeoutMs, appName }: LatticeConnectorArguments);\r\n    activate(): Promise<ConnectorUpdate>;\r\n    getProvider(): Promise<Web3ProviderEngine>;\r\n    getChainId(): Promise<number>;\r\n    getAccount(): Promise<null>;\r\n    deactivate(): void;\r\n    close(): Promise<null>;\r\n}\r\nexport {};\r\n"}}
