{"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport Web3ProviderEngine from 'web3-provider-engine';\r\nimport { TrezorSubprovider } from '@0x/subproviders/lib/src/subproviders/trezor'; // https://github.com/0xProject/0x-monorepo/issues/1400\r\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\r\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider'; // https://github.com/0xProject/0x-monorepo/issues/1400\r\nexport class TrezorConnector extends AbstractConnector {\r\n    constructor({ chainId, url, pollingInterval, requestTimeoutMs, config = {}, manifestEmail, manifestAppUrl }) {\r\n        super({ supportedChainIds: [chainId] });\r\n        this.chainId = chainId;\r\n        this.url = url;\r\n        this.pollingInterval = pollingInterval;\r\n        this.requestTimeoutMs = requestTimeoutMs;\r\n        this.config = config;\r\n        this.manifestEmail = manifestEmail;\r\n        this.manifestAppUrl = manifestAppUrl;\r\n    }\r\n    async activate() {\r\n        if (!this.provider) {\r\n            const TrezorConnect = await import('trezor-connect').then(m => m?.default ?? m);\r\n            TrezorConnect.manifest({\r\n                email: this.manifestEmail,\r\n                appUrl: this.manifestAppUrl\r\n            });\r\n            const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval });\r\n            engine.addProvider(new TrezorSubprovider({ trezorConnectClientApi: TrezorConnect, ...this.config }));\r\n            engine.addProvider(new CacheSubprovider());\r\n            engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs));\r\n            this.provider = engine;\r\n        }\r\n        this.provider.start();\r\n        return { provider: this.provider, chainId: this.chainId };\r\n    }\r\n    async getProvider() {\r\n        return this.provider;\r\n    }\r\n    async getChainId() {\r\n        return this.chainId;\r\n    }\r\n    async getAccount() {\r\n        return this.provider._providers[0].getAccountsAsync(1).then((accounts) => accounts[0]);\r\n    }\r\n    deactivate() {\r\n        this.provider.stop();\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":[],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAA;AAClE,OAAO,kBAAkB,MAAM,sBAAsB,CAAA;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,8CAA8C,CAAA,CAAC,uDAAuD;AACxI,OAAO,gBAAgB,MAAM,4CAA4C,CAAA;AACzE,OAAO,EAAE,cAAc,EAAE,MAAM,uDAAuD,CAAA,CAAC,uDAAuD;AAY9I,MAAM,OAAO,eAAgB,SAAQ,iBAAiB;IAWpD,YAAY,EACV,OAAO,EACP,GAAG,EACH,eAAe,EACf,gBAAgB,EAChB,MAAM,GAAG,EAAE,EACX,aAAa,EACb,cAAc,EACW;QACzB,KAAK,CAAC,EAAE,iBAAiB,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QAEvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,eAAe,GAAG,eAAe,CAAA;QACtC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;QACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;QAClC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAA;IACtC,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC,CAAA;YAC/E,aAAa,CAAC,QAAQ,CAAC;gBACrB,KAAK,EAAE,IAAI,CAAC,aAAa;gBACzB,MAAM,EAAE,IAAI,CAAC,cAAc;aAC5B,CAAC,CAAA;YACF,MAAM,MAAM,GAAG,IAAI,kBAAkB,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAA;YAChF,MAAM,CAAC,WAAW,CAAC,IAAI,iBAAiB,CAAC,EAAE,sBAAsB,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;YACpG,MAAM,CAAC,WAAW,CAAC,IAAI,gBAAgB,EAAE,CAAC,CAAA;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAA;YACvE,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAA;SACvB;QAED,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;QAErB,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAA;IAC3D,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAA;IACtB,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1G,CAAC;IAEM,UAAU;QACf,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;IACtB,CAAC;CACF\"}","dts":{"name":"/Users/gerhardsteenkamp/Desktop/linumlabs/web3-react/packages/trezor-connector/src/index.d.ts","writeByteOrderMark":false,"text":"import { ConnectorUpdate } from '@web3-react/types';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport Web3ProviderEngine from 'web3-provider-engine';\r\ninterface TrezorConnectorArguments {\r\n    chainId: number;\r\n    url: string;\r\n    pollingInterval?: number;\r\n    requestTimeoutMs?: number;\r\n    config?: any;\r\n    manifestEmail: string;\r\n    manifestAppUrl: string;\r\n}\r\nexport declare class TrezorConnector extends AbstractConnector {\r\n    private readonly chainId;\r\n    private readonly url;\r\n    private readonly pollingInterval?;\r\n    private readonly requestTimeoutMs?;\r\n    private readonly config;\r\n    private readonly manifestEmail;\r\n    private readonly manifestAppUrl;\r\n    private provider;\r\n    constructor({ chainId, url, pollingInterval, requestTimeoutMs, config, manifestEmail, manifestAppUrl }: TrezorConnectorArguments);\r\n    activate(): Promise<ConnectorUpdate>;\r\n    getProvider(): Promise<Web3ProviderEngine>;\r\n    getChainId(): Promise<number>;\r\n    getAccount(): Promise<null>;\r\n    deactivate(): void;\r\n}\r\nexport {};\r\n"}}
